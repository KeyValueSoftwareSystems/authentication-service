type Role {
  id: ID!
  name: String!
  permissions: [Permission]
}

input NewRoleInput {
  name: String!
}

input UpdateRoleInput {
  name: String!
}

input UpdateRolePermissionInput {
  permissions: [ID!]!
}

input RoleInputFilter {
  search: RoleSearchInput
  sort: SortInput
  pagination: PaginationInput
}

input RoleSearchInput {
  and: RoleSearchCondition
  or: RoleSearchCondition
}

input RoleSearchCondition {
  name: StringSearchCondition
}

type RolePaginated implements Paginated {
  totalCount: Int
  results: [Role]
}

type Query {
  getRoles(input: RoleInputFilter): RolePaginated!
  getRole(id: ID!): Role
  getRolePermissions(id: ID!): [Permission]
}

type Mutation {
  createRole(input: NewRoleInput!): Role
  updateRole(id: ID!, input: UpdateRoleInput!): Role
  deleteRole(id: ID!): Role
  updateRolePermissions(id: ID!, input: UpdateRolePermissionInput!): [Permission]
}
