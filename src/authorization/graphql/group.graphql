type Group {
  id: ID!
  name: String!
  users: [User]
  roles: [Role]
  permissions: [Permission]
  allPermissions: [Permission]
}

input NewGroupInput {
  name: String!
}

input UpdateGroupInput {
  name: String
  users: [ID!]
}

input UpdateGroupPermissionInput {
  permissions: [ID!]!
}

input UpdateGroupRoleInput {
  roles: [ID!]!
}

type GroupRole {
  id: ID!,
  name: String!
}

input GroupInputFilter {
  search: GroupSearchInput
  sort: SortInput
  pagination: PaginationInput
}

input GroupSearchInput {
  and: GroupSearchCondition
  or: GroupSearchCondition
}

input GroupSearchCondition {
  name: StringSearchCondition
}

type GroupPaginated implements Paginated {
  totalCount: Int
  results: [Group]
}

type Query {
  getGroups(input: GroupInputFilter): GroupPaginated!
  getGroup(id: ID!): Group
  getGroupPermissions(id: ID!): [Permission]
  getGroupRoles(id: ID!): [GroupRole]
}

type Mutation {
  createGroup(input: NewGroupInput!): Group
  updateGroup(id: ID!, input: UpdateGroupInput!): Group
  deleteGroup(id: ID!): Group
  updateGroupPermissions(id: ID!, input: UpdateGroupPermissionInput!): [Permission]
  updateGroupRoles(id: ID!, input: UpdateGroupRoleInput!): [GroupRole]
}
