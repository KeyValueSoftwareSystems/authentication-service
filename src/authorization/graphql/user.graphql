type User {
  id: ID!
  email: String!
  firstName: String!
  middleName: String
  lastName: String!
  active: Boolean!
}

enum OperationType {
  OR
  AND
}

input NewUserInput {
  email: String!
  firstName: String!
  middleName: String
  lastName: String!
}

input UpdateUserInput {
  firstName: String
  middleName: String
  lastName: String
  active: Boolean
}

input UpdateUserPermissionInput {
  permissions: [ID!]!,
  operationType: OperationType
}

input UpdateUserGroupInput {
  groups: [ID!]!
}

type UserGroupResponse {
  id: ID!,
  name: String!,
  active: Boolean
}

type UserPermissions {
  id: ID!,
  name: String!,
  active: Boolean
}

type Query {
  getUsers: [User]!
  getUser(id: ID!): User
}

type Mutation {
  createUser(input: NewUserInput): User
  updateUser(id: ID!, input: UpdateUserInput): User
  deleteUser(id: ID!): User
  updateUserPermissions(id: ID!, input: UpdateUserPermissionInput): [UserPermissions]
  updateUserGroups(id: ID!, input: UpdateUserGroupInput): [UserGroupResponse]
}
