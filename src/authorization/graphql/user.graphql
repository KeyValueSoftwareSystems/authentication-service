type User {
  id: ID!
  email: String
  phone: String
  firstName: String!
  middleName: String
  lastName: String!
  groups: [Group]
  permissions: [Permission]
}

enum OperationType {
  OR
  AND
}

input UpdateUserInput {
  firstName: String
  middleName: String
  lastName: String
}

input UpdateUserPermissionInput {
  permissions: [ID!]!
}

input UpdateUserGroupInput {
  groups: [ID!]!
}

type UserGroupResponse {
  id: ID!,
  name: String!
}

type UserPermissions {
  id: ID!,
  name: String!
}

enum OperationType {
  AND
  OR
}

input UserPermissionsVerification {
permissions: [String]!,
operation: OperationType
}

input UserInputFilter {
  search: UserSearchInput
}

input UserSearchInput {
  and: UserSearchCondition
  or: UserSearchCondition
}

input UserSearchCondition {
  email: SearchCondition
  firstName: SearchCondition
  middleName: SearchCondition
  lastName: SearchCondition
}

input SearchCondition {
  contains: String
  equals: String
  #----Can Include-----#
  # notContains: String
  # notEquals: String
  # greaterThan: String
  # lessThan: String
  # beginsWith: String
}

type Query {
  getUsers(input: UserInputFilter): [User]!
  getUser(id: ID!): User
  getUserGroups(id: ID!): [UserGroupResponse]
  getUserPermissions(id: ID!): [UserPermissions]
  verifyUserPermission(params: UserPermissionsVerification!): Boolean
}

type Mutation {
  updateUser(id: ID!, input: UpdateUserInput!): User
  deleteUser(id: ID!): User
  updateUserPermissions(id: ID!, input: UpdateUserPermissionInput!): [UserPermissions]
  updateUserGroups(id: ID!, input: UpdateUserGroupInput!): [UserGroupResponse]
}
